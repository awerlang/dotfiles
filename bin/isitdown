#!/bin/sh

# $ isitdown [domain]

# TODO:
# * IPv4/IPv6 state
# * additional NICs
# * VPN state
# * dependency checks
# * configuration/error handling
# * exit codes
# * clear DNS cache
# * details for each step
# * quality stats: latency, error rate
# * help

export LANG=C

DOMAIN=${1-google.com}
INTERNET=8.8.8.8
INTERFACE=$(ip route | awk '/default/ { print $5 }')
GATEWAY=$(ip route | awk '/default/ { print $3 }')
STUB=127.0.0.53
DNS=$(grep nameserver /etc/resolv.conf | head -n 1 | awk '{print $2}')
if test -n "$INTERFACE" && test "$DNS" = "$STUB"; then
    DNS=$(resolvectl status "$INTERFACE" | awk -F ": " '/Current DNS Server/ {print $2}')
    resolvectl flush-caches
else
    STUB=
fi

if [[ -n $TERM ]] && [[ $TERM != "dumb" ]]; then
    COLOR1=$(tput setaf 3)
    COLOR2=$(tput setaf 4)
    COLOR3=$(tput setaf 2)
    NC=$(tput sgr0)
else
    COLOR1=
    COLOR2=
    COLOR3=
    NC=
fi

exit_code=0

ping() {
    command ping -q -c 1 -w 1 "$1" >/dev/null
}

local_ip() {
    ip address show "$INTERFACE" | grep -w "$1" | awk '/global/ {print $2}'
}

info() {
    printf "Default gateway\t\t%s\n" "$GATEWAY"
    printf "Stub DNS resolver\t%s\n" "$STUB"
    printf "DNS resolver\t\t%s\n" "$DNS"
    printf "Local IPv4 address\t%s\n" "$(local_ip inet)"
    printf "Local IPv6 address\t%s\n" "$(local_ip inet6)"
    printf "External IPv4 address\t%s\n" "$(timeout 3s dig @resolver1.opendns.com -4 myip.opendns.com A +short)"
    printf "External IPv6 address\t%s\n" "$(timeout 3s dig @resolver1.opendns.com -6 myip.opendns.com AAAA +short)"
}

verify() {
    local status=$?
    local result

    if [ $status -eq 0 ]; then
        result="${COLOR3}OK${NC}"
    else
        result="${COLOR1}NO${NC}"
        exit_code=1
    fi

    printf "[%s] %s\n" "$result" "$1"
}

main() {
    /sbin/ethtool "$INTERFACE" 2>/dev/null | grep --quiet 'Link detected: yes'
    verify "Network interface is online"

    ping "$GATEWAY"
    verify "Reach default gateway"

    if test "$STUB"; then
        nc -zw1 "$STUB" 53
        verify "Reach stub DNS resolver"
    fi

    nc -zw1 "$DNS" 53
    verify "Reach DNS server"

    ping "$INTERNET"
    verify "Reach internet"

    timeout --preserve-status 1s getent hosts "$DOMAIN" >/dev/null
    verify "Resolve domain names"

    timeout --preserve-status 5s nc -zw1 "$DOMAIN" 443
    verify "Reach website"

    curl -s -m 10 "https://$DOMAIN" >/dev/null
    verify "Download securely"
}

main
echo
info
exit $exit_code
