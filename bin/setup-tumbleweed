#!/bin/bash

set -o nounset

declare exitOption=''

main() {
    confirm "Setup openSUSE Linux on this computer" || exit 1

    exitOption='/(e)xit'

    sudo -v

    local pre post
    pre=$(sudo snapper create --type pre --print-number --description 'setup-tumbleweed' --cleanup-algorithm number) || exit 1
    install
    post=$(sudo snapper create --type post --pre-number "$pre" --print-number --description 'setup-tumbleweed' --cleanup-algorithm number)

    printf '? Run this command to see which system files were changed: \n%s\n' "$ sudo snapper status $pre..$post"
}

install() {
    etc

    # install/remove packages

    remove_packages
    install_packages
    additional_repos
    flatpaks

    # regularly updated features

    auto_updates
    groups
    sudoers

    # mostly directed for the first time setup

    base_system
    snapper_timeline
    hostname
    clock
    resume
    fstab
    spotify

    end
}

end() {
    exitOption=''
    review
    todo_next
}

confirm() {
    read -r -n 1 -p "> $1 (y/N${exitOption})? "
    echo
    if [[ $REPLY =~ ^[Ee]$ ]]; then
        end
        exit
    fi
    [[ $REPLY =~ ^[Yy]$ ]]
}

zypper() {
    sudo 'zypper' --quiet "$@"
}

etc() {
    # assume /etc in vcs when etckeeper is already installed
    command -v etckeeper >/dev/null && return

    confirm "Setup local git repository for /etc" || return

    zypper --non-interactive install etckeeper >/dev/null || return 1

    # set up a preferred editor instead of vim
    sudo git config --global core.editor "${EDITOR:-nano}"

    # this git repository at /etc is owned by the root user
    sudo etckeeper init
    sudo etckeeper commit -m "Initial system configuration"
}

remove_packages() {
    confirm "Remove unused packages" || return

    declare -a pkgs=(
                    # support for hardware we don't have
                    "cups-client"
                    "gutenprint"
                    "libvdpau_nouveau"
                    "Mesa-dri-nouveau"
                    "ModemManager"
                    "skanlite"
                    "suse-prime"
                    "udev-configure-printer"
                    "usbmuxd"
                    "yast2-iscsi-client"

                    # we use our own scripts instead
                    "btrfsmaintenance"
                    "PackageKit"
                    "PackageKit-gstreamer-plugin"
                    "plasma5-pk-updates"

                    # unused, or we have better alternatives
                    "gdb"
                    "gnome-online-accounts"
                    "gvfs-backend-afc"
                    "gvfs-backend-samba"
                    "joe"
                    "kaccounts-integration"
                    "kdeconnect-kde"
                    "kmag"
                    "kmousetool"
                    "kompare"
                    "konversation"
                    "libproxy1-config-kde"
                    "lightdm"
                    "openconnect"
                    "samba"
                    "samba-client"
                    "screen"
                    "plasma5-desktop-emojier"
                    "plasma5-session-wayland"
                    "plymouth"
                    "postfix"
                    "vorbis-tools"
                    "vlc"
                    "wicked"
                    )

    declare -a to_remove=()

    local pkg
    for pkg in "${pkgs[@]}"
    do
        rpm -q "$pkg" >/dev/null && confirm "Remove $pkg" && to_remove+=("$pkg")
    done

    # shellcheck disable=SC2068
    (( ${#to_remove[@]} )) && zypper rm --clean-deps --details ${to_remove[@]} && zypper al ${to_remove[@]} >/dev/null

    confirm "Remove *-lang packages" && zypper rm --clean-deps --details '*-lang' && zypper addlock '*-lang' >/dev/null
}

install_packages() {
    confirm "Install additional packages" || return

    declare -a pkgs=(
                    # system diagnostics
                    "bcc-tools"
                    "btop"
                    "compsize"
                    "dstat"
                    "fatrace"
                    "hardinfo"
                    "htop"
                    "ioping"
                    "iotop"
                    "mtr"
                    "ncdu"
                    "pv"
                    "smem"
                    "strace"
                    "sysstat"

                    # system services
                    "bluez-obexd"
                    "docker"
                    "docker-compose"
                    "openvpn"
                    "qemu"
                    "rtkit"
                    "pipewire"
                    "pipewire-pulseaudio"
                    "systemd-network"
                    "virt-manager"
                    "udisks2"
                    "wireplumber"
                    "wireplumber-audio"

                    # most useful programs
                    "chromium"
                    "flatpak"
                    "fortune"
                    "flameshot"
                    "smplayer"
                    "tealdeer"
                    "yakuake"

                    # additional hardware management
                    "nvme-cli"
                    "spectre-meltdown-checker"
                    "xdpyinfo"

                    # fonts
                    "terminus-bitmap-fonts"
                    )

    declare -a to_install=()

    local pkg
    for pkg in "${pkgs[@]}"
    do
        rpm -q "$pkg" >/dev/null || confirm "Install $pkg" && to_install+=("$pkg")
    done

    #shellcheck disable=SC2068
    (( ${#to_install[@]} )) && zypper install --details ${to_install[@]}
}

additional_repos() {
    confirm "Add additional Tumbleweed repositories" || return

    # packman
    zypper lr packman-essentials &>/dev/null || (confirm "Packman - Multimedia codecs" && zypper addrepo -cfp 90 http://ftp.gwdg.de/pub/linux/misc/packman/suse/openSUSE_Tumbleweed/Essentials packman-essentials) && {
        zypper dup --details --from packman-essentials --allow-vendor-change
    }

    # nvidia
    if ! zypper lr NVIDIA &>/dev/null && sudo lspci | grep NVIDIA >/dev/null; then
        zypper addrepo https://download.nvidia.com/opensuse/tumbleweed NVIDIA

        printf "? Choose the appropriate version for your NVIDIA graphics card:\n"
        zypper search x11-video-nvidiaG0* | grep "x11-[^ ]*"
        read -r -n 1 -p "Type the last digit (4, 5...): "

        zypper install --details "x11-video-nvidiaG0${REPLY}"
    fi

    # vs code
    zypper lr code &>/dev/null || (confirm "Visual Studio Code" && {
        sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
        sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ntype=rpm-md\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/zypp/repos.d/vscode.repo'

        zypper install code
    })

    printf "? There are more repositories at https://en.opensuse.org/Additional_package_repositories\n"
}

flatpaks() {
    confirm "Install Flatpak apps" || return

    declare -a pkgs=(
                    "com.getpostman.Postman"
                    "com.github.tchx84.Flatseal"
                    "com.slack.Slack"
                    "com.valvesoftware.Steam"
                    "org.telegram.desktop"
                    "us.zoom.Zoom"
                    )

    declare -a to_install=()

    local pkg
    for pkg in "${pkgs[@]}"
    do
        if ! flatpak info "$pkg" &>/dev/null; then
            confirm "Install $pkg" && to_install+=("$pkg")
        fi
    done

    #shellcheck disable=SC2068
    (( ${#to_install[@]} )) \
        && flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo \
        && flatpak install --user --app flathub ${to_install[@]}
}

auto_updates() {
    confirm "Enable prefetching system updates" || return
    [[ -x "$HOME/bin/auto-update" ]] || { printf 'Error: needs dotfiles to setup auto-update\n' >&2; return; }

    zypper modifyrepo --all --no-refresh

    sudo SYSTEMD_EDITOR='cp /dev/stdin' systemctl edit --full --force auto-update <<EOF
[Unit]
Description=Checks for system updates
Wants=network-online.target
After=network-online.target

[Service]
Type=exec
User=$USER
Environment="PATH=$HOME/bin:/usr/local/bin:/usr/bin:/bin"
ExecStart=$HOME/bin/auto-update

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl enable auto-update
}

groups() {
    confirm "Add current user to administrative group" || return

    sudo usermod -aG wheel "$USER"
}

sudoers() {
    confirm "Allow selected commands to run without asking the root password" || return

    sudo SUDO_EDITOR=tee visudo -f "/etc/sudoers.d/50-wheel" >/dev/null <<EOF
Defaults    editor=/usr/bin/nano:/usr/bin/vim

Cmnd_Alias  ADMIN = /usr/bin/etckeeper, \\
                    /usr/bin/journalctl, \\
                    /usr/bin/snapper, \\
                    /usr/bin/systemctl start openvpn@work.service, \\
                    /usr/bin/systemctl stop openvpn@work.service, \\
                    /usr/bin/zypper, \\
                    /usr/sbin/iotop, \\
                    /usr/sbin/rpmconf, \\
                    /usr/sbin/rpmconfigcheck

%wheel      ALL = (root) NOPASSWD: ADMIN
EOF
}

base_system() {
    # turn on NumLock
    sudo sed -i 's/KBD_NUMLOCK="bios"/KBD_NUMLOCK="yes"/' /etc/sysconfig/keyboard

    # decrease swapping activity to a minimum (requires enough RAM)
    sudo tee /etc/sysctl.d/99-swap.conf >/dev/null <<EOF
vm.swappiness=33
vm.vfs_cache_pressure=50
EOF

    # enable all SysRq functions
    sudo tee /etc/sysctl.d/99-sysrq.conf >/dev/null <<EOF
kernel.sysrq = 1
EOF

    # enable accounting
    sudo tee /etc/sysctl.d/99-task.conf >/dev/null <<EOF
kernel.task_delayacct=1
EOF

    # enable large inotify watcher count
    sudo tee /etc/sysctl.d/99-watchers.conf >/dev/null <<EOF
fs.inotify.max_user_watches=524288
EOF

    sudo sed -i 's/FONT=.*/FONT=ter-116b.psfu/' /etc/vconsole.conf

    # TODO: remove?
    read -r -p "> Keymap for Virtual Console (empty to skip): "
    [[ -n "$REPLY" ]] && sudo sed -i 's/KEYMAP=br-abnt2/KEYMAP=$REPLY/' /etc/vconsole.conf
}

snapper_timeline() {
    confirm "Create hourly snapshots for /home" || return

    sudo snapper -c home create-config -t default /home
    sudo systemctl enable snapper-timeline.timer
}

hostname() {
    confirm "Change hostname - current: $(hostnamectl --static)" || return

    read -r -p "> Hostname (leave empty to keep current hostname): "
    [[ -n "$REPLY" ]] && sudo hostnamectl set-hostname "$REPLY"
}

clock() {
    confirm "Set hardware clock to UTC" || return

    # usually the BIOS clock is set to local time, we'll switch to UTC
    sudo timedatectl set-local-rtc 0
    sudo hwclock --systohc --utc
}

resume() {
    confirm "Setup hibernation" && use_hibernation || confirm "Prevent hibernation/resume" && no_resume || return

    # update grub menu
    sudo grub2-mkconfig -o /boot/grub2/grub.cfg >/dev/null
}

no_resume() {
    # remove hibernation from power options, and remove partition from kernel parameters

    local file=/etc/default/grub

    apply() {
        sed 's/\bresume=[^ ]*/noresume/;s/\bsplash=[^ ]* //' $file
    }

    if ! apply | diff -u $file - | delta; then
        confirm "Overwrite $file" || return 1

        # remove resume= option from kernel parameters
        apply | sudo tee $file >/dev/null
    fi

    # remove Hibernate option from menus
    sudo tee /etc/polkit-1/rules.d/10-disable-hibernate.rules >/dev/null <<EOF
polkit.addRule(function(action, subject) {
    if (action.id == "org.freedesktop.login1.hibernate" ||
        action.id == "org.freedesktop.login1.hibernate-multiple-sessions")
    {
        return polkit.Result.NO;
    }
});
EOF
}

use_hibernation() {
    # Secure Boot is incompatible with resume from disk
    sudo sed -i 's/SECURE_BOOT="yes"/SECURE_BOOT="no"/' /etc/sysconfig/bootloader
}

fstab() {
    local file=/etc/fstab

    # we don't need access times to be recorded

    apply() {
        sed '/btrfs/{/noatime/!{s/defaults/noatime/g;s/subvol/noatime,subvol/g}}' $file | column -t -o '  '
    }

    apply | diff -u $file - | delta

    confirm "Overwrite $file" && apply | sudo tee $file >/dev/null
}

spotify() {
    confirm "Configure Spotify" || return

    spotifyd_bin
    spotify_connect
    spotify_service
}

spotifyd_bin() {
    confirm "Download and place the spotifyd binary in path" || return

    local version=0.3.0
    local sha512='bb69fbeedc4565a272416fc5b078e93eb0675a9c425672140538f50240ee557ea8df08ff3ecf5ff7c5640d560124b04ff61a825583550e6ac94e8f0437c079ad  spotifyd-linux-full.tar.gz'

    local outdir
    outdir=$(mktemp -d)
    pushd "$outdir" >/dev/null || return
    wget --quiet https://github.com/Spotifyd/spotifyd/releases/download/v$version/spotifyd-linux-full.tar.gz \
        && sha512sum --check --status - <<<"$sha512" \
        && tar -xf spotifyd-linux-full.tar.gz \
        && sudo 'install' -D -s -T spotifyd /opt/bin/spotifyd
    rm spotifyd-linux-full.tar.gz
    rm spotifyd
    popd >/dev/null || return
    rmdir "$outdir"
}

spotify_connect() {
    confirm "Enable Spotify Connect" || return

    sudo firewall-cmd --quiet --zone=home --add-service=spotify-sync
    sudo firewall-cmd --quiet --permanent --zone=home --add-service=spotify-sync
}

spotify_service() {
    confirm "Run spotifyd as an user service" || return
    [[ -x "$HOME/bin/spotifyd" ]] || { printf 'Error: needs dotfiles to setup spotifyd\n' >&2; return; }

    SYSTEMD_EDITOR='cp /dev/stdin' systemctl edit --user --full --force spotifyd <<EOF
[Unit]
Description=A spotify playing daemon
Documentation=https://github.com/Spotifyd/spotifyd
Wants=sound.target
After=sound.target

[Service]
Type=exec
ExecStart=$HOME/bin/spotifyd
Restart=always
RestartSec=12

NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict

[Install]
WantedBy=default.target
EOF

    systemctl --user enable --now spotifyd
}

review() {
    command -v etckeeper >/dev/null || return

    sudo etckeeper vcs add -A -N
    if ! sudo etckeeper vcs diff --exit-code; then
        confirm "Commit changes" && sudo etckeeper commit || confirm "Revert changes then" && sudo etckeeper vcs reset --hard HEAD >/dev/null
    fi

    # rebuild initramfs, in order to pick up changes in configuration and packages
    sudo dracut -f --regenerate-all >/dev/null
}

todo_next() {
    printf "? To do next:\n"
    printf "  * Configure monitors\n"
    printf "  * Configure networks\n"
    printf "  * Configure power management\n"
    printf "  * Configure browsers\n"
    printf "  * Configure backup\n"
    printf "\n"
    printf "Bye!\n"
}

main
